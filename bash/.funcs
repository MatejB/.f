# Update dependencies
function depu() {

    # npm
    file_count=$(ls -1 package-lock.json 2>/dev/null | wc -l)
    if [ "${file_count}" -gt 0 ]; then
        printf "Updating npm dependencies for ${PWD##*/}...\n\n"
        npm update
        npm outdated
    fi

    # Yarn
    file_count=$(ls -1 yarn.lock 2>/dev/null | wc -l)
    if [ "${file_count}" -gt 0 ]; then
        printf "Updating Yarn dependencies for ${PWD##*/}...\n\n"
        yarn upgrade > /dev/null
        yarn outdated
    fi

    # Go
    file_count=$(ls -1 go.mod 2>/dev/null | wc -l)
    if [ "${file_count}" -gt 0 ]; then
        printf "Updating Go dependencies for ${PWD##*/}...\n\n"
        go get -u
        go mod tidy
    fi

    # Rust
    file_count=$(ls -1 Cargo.toml 2>/dev/null | wc -l)
    if [ "${file_count}" -gt 0 ]; then
        printf "Updating Cargo dependencies for ${PWD##*/}...\n\n"
        cargo update
    fi

    # Git submodules
    file_count=$(ls -1 .gitmodules 2>/dev/null | wc -l)
    if [ "${file_count}" -gt 0 ]; then
        printf "Updating Git submodules for ${PWD##*/}...\n\n"
        git submodule update --init
    fi

}

# System update
function pacu() {
    processes=()

    # System tools
    case "$(uname)" in
    # On Linux, use the respective package manager
    'Linux')
        # Arch Linux
        if [ -x "$(command -v pacman)" ]; then
            printf '\e[1mUpdating pacman packages\e[0m\n'
            sudo pacman -Syu --noconfirm
            orphans=$(sudo pacman -Qtdq) || orphans=''
            if [ ! -z "${orphans}" ]; then
                sudo pacman -Rns $orphans --noconfirm
            fi
            sudo pacman -Sc --noconfirm
            sudo pacman-optimize
        fi
        if [ -x "$(command -v yaourt)" ]; then
            printf '\e[1mUpdating yaourt packages\e[0m\n'
            yaourt -Syua --noconfirm
        fi
        # Solus
        if [ -x "$(command -v eopkg)" ]; then
            printf '\e[1mUpdating eopkg packages\e[0m\n'
            sudo eopkg upgrade
        fi
        # Debian
        if [ -x "$(command -v apt-get)" ]; then
            printf '\e[1mUpdating apt packages\e[0m\n'
            sudo apt-get update
            sudo apt-get dist-upgrade -y
            sudo apt-get autoremove -y
            sudo apt-get autoclean -y
        fi
        ;;
    # On macOS, use mas and Homebrew in parallel
    'Darwin')
        if [ -x "$(command -v mas)" ]; then
            printf '\e[1mUpdating App Store apps\e[0m\n'
            mas upgrade
        fi
        if [ -x "$(command -v brew)" ]; then
            printf '\e[1mUpdating Homebrew packages\e[0m\n'
            brew update
            brew upgrade
            cat ~/dotfiles/Brewfile* | brew bundle --file=-
            cat ~/dotfiles/Brewfile* | brew bundle cleanup --force --file=-
            brew cu --all --yes --cleanup
            brew cleanup --prune 7
        fi
        if typeset -f zprezto-update > /dev/null; then
            printf '\e[1mUpdating zprezto\e[0m\n'
            zprezto-update &
            processes+=("$!")
        fi
        ;;
    esac

    # Go
    if [ -x "$(command -v go)" ]; then
        printf '\e[1mUpdating Go binaries\e[0m\n'
        ("${HOME}/.f/bash/update-go.sh") &
        processes+=("$!")
    fi

    # Rust
    if [ -x "$(command -v rustup)" ]; then
        printf '\e[1mUpdating rustup components\e[0m\n'
        ("rustup update") &
        processes+=("$!")
    fi

    # npm
    if [ -x "$(command -v npm)" ]; then
        printf '\e[1mUpdating globally installed npm packages\e[0m\n'
        npm update -g

        # printf '\e[1mUpdating Node.js projects\e[0m\n'
        # ("${HOME}/dotfiles/update-js.sh") &
        processes+=("$!")
    fi

    # Yarn
    if [ -x "$(command -v yarn)" ]; then
        printf '\e[1mUpdating globally installed Yarn packages\e[0m\n'
        (yarn global upgrade > /dev/null) &
        processes+=("$!")
    fi

    # Ruby gems
    if [ -x "$(command -v gem)" ]; then
        printf '\e[1mUpdating Ruby gems\e[0m\n'
        (gem update --force && gem cleanup) &
        processes+=("$!")
    fi

    # Python pip
    if [ -x "$(command -v pip)" ]; then
        printf '\e[1mUpdating pip packages\e[0m\n'
        (pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install --user --upgrade) &
        processes+=("$!")
    fi
    if [ -x "$(command -v pip2)" ]; then
        printf '\e[1mUpdating pip2 packages\e[0m\n'
        (pip2 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip2 install --user --upgrade) &
        processes+=("$!")
    fi
    if [ -x "$(command -v pip3)" ]; then
        printf '\e[1mUpdating pip3 packages\e[0m\n'
        (pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip3 install --user --upgrade) &
        processes+=("$!")
    fi

    # Vim
    if [ -x "$(command -v nvim)" ]; then
        printf '\e[1mUpdating Vim plugins\e[0m\n'
        nvim -c 'PlugClean! | PlugUpgrade | PlugUpdate --sync | qa'
    fi

    # Wait for all processes to finish
    for p in ${processes[*]}; do
        wait "$p"
    done

    printf '\e[1mSystem update finished\e[0m\n'
}
